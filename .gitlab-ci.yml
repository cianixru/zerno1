# Стадии процесса сборки.
stages:
  - build
  #- test
  - docker-image
  - deploy

# Build Application and NPN Dependency Packages.
build:
  stage: build
  image: node:16.14.0
  services:
    - postgres:14.2
  variables:
    POSTGRES_HOST: postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: zerno
    POSTGRES_PASSWORD: 852456123
    POSTGRES_DB: zern_test_db
    POSTGRES_DATABASE: zern_test_db
  rules:
    - if: '(($CI_COMMIT_TITLE =~ /^Merge .*$/) && ($CI_COMMIT_BRANCH == "develop")) || ($CI_PIPELINE_SOURCE == "push")'
  allow_failure: true
  script:
    - echo "Start building App"
    - apt-get update
    - apt-get install mc -y
    - npm install
    - npm ci
    - npm run migration:run
    - npm run seed:run
    - npm run build
    - echo "Build successfully!"
  artifacts:
    expire_in: 1 hour
    #paths:
    #  - build
    #  - node_modules/

# Testing the application before building. 
#test:
#  stage: test
#  image: node:16.14.0
#  rules:
#    - if: '(($CI_COMMIT_TITLE =~ /^Merge .*$/) && ($CI_COMMIT_BRANCH == "develop"))' 
#  script:
#    - echo "Testing App"
#    - npm run test
#    - npm run test:e2e
#    - npm run test:cov
#    - echo "Test successfully!"

# Create Images on Build host. 
image-building:
  stage: docker-image
  rules:
    - if: '(($CI_COMMIT_TITLE =~ /^Merge .*$/) && ($CI_COMMIT_BRANCH == "develop"))'
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
        if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
          tag=""
          echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
        else
          tag=":$CI_COMMIT_REF_SLUG"
          echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
        fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .
    - docker push "$CI_REGISTRY_IMAGE"
  tags:
    - backend-new

# Deploy
deploy:
  stage: deploy
  rules:
    - if: '(($CI_COMMIT_TITLE =~ /^Merge .*$/) && ($CI_COMMIT_BRANCH == "develop"))'
  before_script:
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_DEPLOY" | ssh-add -
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - chmod 700 ~/.ssh
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
        if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
          tag=""
          echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
        else
          tag=":$CI_COMMIT_REF_SLUG"
          echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
        fi
    #- tag=":$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - ssh root@10.10.10.55 "/home/server/start.sh ${tag}"
    #- ssh root@10.10.10.22 docker stop reactapp && docker rm -f reactapp
    #- ssh root@10.10.10.22 docker run -d -p 80:80 --name=reactapp "$CI_REGISTRY_IMAGE${tag}"
    #- docker stop develop && docker rm -f develop
    #- docker run -d -ti --env-file=/home/server/.env.example -p 4000:4000 --name=develop "$CI_REGISTRY_IMAGE${tag}"
    #- docker exec develop npm run migration:run
  tags:
    - backend-new 
